#!/bin/bash

# Define colors for non-gum messages
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# Display welcome message with gum styling
cat ./jirasik.txt
gum style --foreground 212 "Welcome to jirasik!"

# Function to check if a command exists with custom help text
check_command() {
    local cmd=$1
    local help_text=$2
    local package_name=$3

    if ! command -v "$cmd" &>/dev/null; then
        gum style --foreground 196 "Error: $cmd command not found"
        gum style "$help_text"

        # If gum is not installed, ask user to confirm without using gum
        if [[ "$cmd" == "gum" ]]; then
            read -p "Would you like to install gum? (Y/n): " response
            if [[ "$response" =~ ^[Yy]$ ]] || [[ -z "$response" ]]; then
                echo "Installing gum..."
                brew install gum
            else
                echo "Installation skipped. Please install gum manually."
                exit 1
            fi
        # Otherwise use gum, ask to run the brew install command
        elif gum confirm "Would you like to install $package_name using brew?"; then
            gum spin --spinner dot --title "Installing $cmd..." -- brew install "$package_name"
        else
            gum style --foreground 196 "Installation skipped. Please install $cmd manually."
            exit 1
        fi
    fi
}

# Check required commands with custom installation instructions
check_command "gum" "Please install gum (https://github.com/charmbracelet/gum)" "gum"
check_command "skate" "Please install skate (https://github.com/charmbracelet/skate)" "skate"
check_command "jira" "Please install jira-cli (https://github.com/ankitpokhrel/jira-cli)" "jira-cli"
check_command "jq" "Please install jq (https://stedolan.github.io/jq/)" "jq"

# Define common variables
# Array of executables to install
SCRIPT_NAMES=("jirasik" "jira-api" "jira-cli")

# Define installation directories for each scope
INSTALL_BIN_SYSTEM="/usr/local/bin"
INSTALL_BIN_USER="$HOME/.local/bin"
INSTALL_DIR_SYSTEM="/opt/jirasik"
INSTALL_DIR_USER="$HOME/.local/share/jirasik"

# Function to set installation paths based on selected type
set_install_paths() {
    local install_type="$1"
    if [[ "$install_type" == "User" ]]; then
        INSTALL_BIN="$INSTALL_BIN_USER"
        INSTALL_DIR="$INSTALL_DIR_USER"
    elif [[ "$install_type" == "System" ]]; then
        INSTALL_BIN="$INSTALL_BIN_SYSTEM"
        INSTALL_DIR="$INSTALL_DIR_SYSTEM"
        # Require sudo for system-wide
        if [[ $EUID -ne 0 ]]; then
            gum style --foreground 196 "System-wide installation requires sudo."
            exit 1
        fi
    else
        gum style --foreground 196 "Installation cancelled."
        exit 1
    fi
}

# Function to create symlinks for all executables
create_symlinks() {
    for script in "${SCRIPT_NAMES[@]}"; do
        TARGET="$1/$script"
        if [[ ! -f "$TARGET" ]]; then
            gum style --foreground 214 "Warning: '$script' not found, skipping."
            continue
        fi
        # Ensure the executable is executable
        chmod +x "$TARGET"
        ln -sf "$TARGET" "$INSTALL_BIN/$script"
        gum style --foreground 82 "Symlink created: $INSTALL_BIN/$script -> $TARGET"
    done
}

# Function to install in symlink mode
install_symlink_mode() {
    # Link all executables from the current folder.
    create_symlinks "$PWD"
}

# Function to install in standalone mode
install_standalone_mode() {
    mkdir -p "$INSTALL_DIR"
    # Copy all files (including hidden ones) from current folder into INSTALL_DIR.
    if command -v rsync &>/dev/null; then
        gum spin --spinner dot --title "Copying files..." -- rsync -a --delete "$PWD"/ "$INSTALL_DIR"/
    else
        cp -r "$PWD"/. "$INSTALL_DIR"
    fi

    # Create a marker file to denote a standalone install.
    touch "$INSTALL_DIR/.jirasik_installed"

    # Create symlinks for all executables
    create_symlinks "$INSTALL_DIR"

    gum style --foreground 82 "Standalone installation complete:"
    gum style "  Folder installed to: $INSTALL_DIR"
    gum style "  Executables available in: $INSTALL_BIN"
}

# Function for PATH modification for user installation
update_path_if_needed() {
    if [[ "$INSTALL_BIN" == "$INSTALL_BIN_USER" && ":$PATH:" != *":$INSTALL_BIN:"* ]]; then
        SHELL_RC=""
        if [[ -n "$ZSH_VERSION" ]]; then
            SHELL_RC="$HOME/.zshrc"
        elif [[ -n "$BASH_VERSION" ]]; then
            SHELL_RC="$HOME/.bashrc"
            [[ -f "$HOME/.bash_profile" ]] && SHELL_RC="$HOME/.bash_profile"
        else
            SHELL_RC="$HOME/.profile"
        fi
        echo "export PATH=\"$INSTALL_BIN:\$PATH\"" >>"$SHELL_RC"
        gum style --foreground 82 "Added $INSTALL_BIN to PATH in $SHELL_RC. Please restart your terminal or run: source $SHELL_RC"
    fi
}

# Function to uninstall executables
uninstall_executables() {
    # Remove the symlinks from the bin directory
    for script in "${SCRIPT_NAMES[@]}"; do
        if [[ -L "$INSTALL_BIN/$script" ]]; then
            rm -f "$INSTALL_BIN/$script"
            gum style --foreground 82 "Removed symlink: $INSTALL_BIN/$script"
        else
            gum style --foreground 214 "No symlink found at $INSTALL_BIN/$script"
        fi
    done

    # If the installation directory contains the marker file, remove it.
    if [[ -f "$INSTALL_DIR/.jirasik_installed" ]]; then
        rm -rf "$INSTALL_DIR"
        gum style --foreground 82 "Removed standalone installation directory: $INSTALL_DIR"
    else
        gum style --foreground 214 "No standalone installation found in $INSTALL_DIR (symlink installation remains intact)."
    fi
}

# Main execution flow
main() {
    # Prompt for main action
    ACTION=$(gum choose --header "Choose an option:" "Install Jirasik Tools" "Uninstall Jirasik Tools")

    if [[ "$ACTION" == "Install Jirasik Tools" ]]; then
        # Installation process
        INSTALL_TYPE=$(gum choose --header "Where do you want to install?" \
            "User" "System")

        gum style "Selected: $INSTALL_TYPE installation"
        set_install_paths "$INSTALL_TYPE"
        mkdir -p "$INSTALL_BIN"

        # Prompt for installation method
        METHOD=$(gum choose --header "Choose installation method:" \
            "Symlink mode (link executables from current folder)" \
            "Standalone mode (copy folder to install dir and link executables)")

        if [[ "$METHOD" == "Symlink mode"* ]]; then
            install_symlink_mode
        elif [[ "$METHOD" == "Standalone mode"* ]]; then
            install_standalone_mode
        else
            gum style --foreground 196 "Installation cancelled."
            exit 1
        fi

        update_path_if_needed
        gum style --border normal --margin "1" --padding "1 2" --border-foreground 82 \
            "Installation complete! You can now run '${SCRIPT_NAMES[*]}' from anywhere."

    elif [[ "$ACTION" == "Uninstall Jirasik Tools" ]]; then
        # Uninstallation process
        UNINSTALL_TYPE=$(gum choose --header "Which installation do you want to remove?" \
            "User (${INSTALL_BIN_USER})" \
            "System (${INSTALL_BIN_SYSTEM}) [Requires sudo]")

        if [[ "$UNINSTALL_TYPE" == "User"* ]]; then
            set_install_paths "User"
        elif [[ "$UNINSTALL_TYPE" == "System"* ]]; then
            set_install_paths "System"
        else
            gum style --foreground 196 "Uninstallation cancelled."
            exit 1
        fi

        uninstall_executables
        gum style --border normal --margin "1" --padding "1 2" --border-foreground 82 \
            "Uninstallation complete!"

    else
        gum style --foreground 196 "No valid action selected. Exiting."
        exit 1
    fi
}

# Run the main function
main
