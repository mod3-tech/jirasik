#!/bin/bash

# Define colors for non-gum messages
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

# Define dependencies to check
DEPS=(
    "gum:gum:https://github.com/charmbracelet/gum"
    "skate:skate:https://github.com/charmbracelet/skate"
    "jira:jira-cli:https://github.com/ankitpokhrel/jira-cli"
    "jq:jq:https://stedolan.github.io/jq/"
)

# Function to check and install dependencies
check_dependencies() {
    for dep in "${DEPS[@]}"; do
        IFS=':' read -r cmd pkg url <<<"$dep"

        if ! command -v "$cmd" &>/dev/null; then
            gum style --foreground 196 "Error: $cmd command not found"
            gum style "Please install $cmd ($url)"

            # Special handling for gum
            if [[ "$cmd" == "gum" ]]; then
                read -p "Would you like to install gum? (Y/n): " response
                if [[ "$response" =~ ^[Yy]$ ]] || [[ -z "$response" ]]; then
                    echo "Installing gum..."
                    brew install gum
                    continue
                else
                    echo "Installation skipped. Please install gum manually."
                    exit 1
                fi
            fi

            # For other dependencies
            if gum confirm "Would you like to install $pkg using brew?"; then
                gum spin --spinner dot --title "Installing $cmd..." -- brew install "$pkg"
            else
                gum style --foreground 196 "Installation skipped. Please install $cmd manually."
                exit 1
            fi
        fi
    done
}

SCRIPT_NAMES=("jirasik" "jira-api" "jira-cli")

# Install helper function
install_jirasik() {
    local install_type=$1
    local method=$2
    local install_bin install_dir

    # Set paths based on install type
    if [[ "$install_type" == "User" ]]; then
        install_bin="$HOME/.local/bin"
        install_dir="$HOME/.local/share/jirasik"
    else
        install_bin="/usr/local/bin"
        install_dir="/opt/jirasik"
        # Require sudo for system-wide
        [[ $EUID -ne 0 ]] && {
            gum style --foreground 196 "System-wide installation requires sudo."
            exit 1
        }
    fi

    # Create directories
    mkdir -p "$install_bin"

    # Handle installation based on method
    if [[ "$method" == "Standalone"* ]]; then
        mkdir -p "$install_dir"
        # Use rsync if available, fallback to cp
        if command -v rsync &>/dev/null; then
            gum spin --spinner dot --title "Copying files..." -- rsync -a --delete "$PWD"/ "$install_dir"/
        else
            cp -r "$PWD"/. "$install_dir"/
        fi
        touch "$install_dir/.jirasik_installed"
        source_dir="$install_dir"
    else
        source_dir="$PWD"
    fi

    # Create symlinks
    for script in "${SCRIPT_NAMES[@]}"; do
        target="$source_dir/$script"
        if [[ ! -f "$target" ]]; then
            gum style --foreground 214 "Warning: '$script' not found, skipping."
            continue
        fi
        chmod +x "$target"
        ln -sf "$target" "$install_bin/$script"
        gum style --foreground 82 "Symlink created: $install_bin/$script -> $target"
    done

    # Update PATH if needed
    if [[ "$install_type" == "User" && ":$PATH:" != *":$install_bin:"* ]]; then
        shell_rc=""
        if [[ -n "$ZSH_VERSION" ]]; then
            shell_rc="$HOME/.zshrc"
        elif [[ -n "$BASH_VERSION" ]]; then
            shell_rc="$HOME/.bashrc"
            [[ -f "$HOME/.bash_profile" ]] && shell_rc="$HOME/.bash_profile"
        else
            shell_rc="$HOME/.profile"
        fi
        echo "export PATH=\"$install_bin:\$PATH\"" >>"$shell_rc"
        gum style --foreground 82 "Added $install_bin to PATH in $shell_rc. Please restart your terminal."
    fi

    # Run setup script
    setup_path="$source_dir/setup.sh"
    if [[ -f "$setup_path" ]]; then
        chmod +x "$setup_path"
        "$setup_path" && gum style --foreground 82 "Setup script completed successfully." ||
            gum style --foreground 196 "Setup script exited with errors."
    fi

    return 0
}

# Uninstall function
uninstall_jirasik() {
    local install_type=$1
    local install_bin install_dir

    # Set paths based on uninstall type
    if [[ "$install_type" == "User"* ]]; then
        install_bin="$HOME/.local/bin"
        install_dir="$HOME/.local/share/jirasik"
    else
        install_bin="/usr/local/bin"
        install_dir="/opt/jirasik"
        [[ $EUID -ne 0 ]] && {
            gum style --foreground 196 "System-wide uninstallation requires sudo."
            exit 1
        }
    fi

    # Remove symlinks
    for script in "${SCRIPT_NAMES[@]}"; do
        [[ -L "$install_bin/$script" ]] && {
            rm -f "$install_bin/$script"
            gum style --foreground 82 "Removed: $install_bin/$script"
        }
    done

    # Remove install directory if standalone
    [[ -f "$install_dir/.jirasik_installed" ]] && {
        rm -rf "$install_dir"
        gum style --foreground 82 "Removed: $install_dir"
    }

    return 0
}

# Check if user has sudo access without asking for password
has_sudo_access() {
    if sudo -n true 2>/dev/null; then
        return 0 # Has passwordless sudo
    else
        # Try using the -v flag which checks credentials
        sudo -v -n &>/dev/null
        return $? # Return the exit status (0 if successful, non-zero otherwise)
    fi
}

main() {
    # Display welcome message
    cat ./jirasik.txt
    gum style --foreground 212 "Welcome to jirasik!"

    # Check dependencies first
    check_dependencies

    # Prompt for action
    ACTION=$(gum choose --header "Choose an option:" "Install Jirasik Tools" "Uninstall Jirasik Tools")

    if [[ "$ACTION" == "Install"* ]]; then
        # Check for sudo access and prepare installation options
        if has_sudo_access; then
            INSTALL_TYPE=$(gum choose --header "Where do you want to install?" "User" "System")
        else
            gum style --foreground 214 "Note: System-wide installation unavailable (requires sudo access)"
            INSTALL_TYPE="User"
        fi

        METHOD=$(gum choose --header "Choose installation method:" \
            "Symlink mode (link executables from current folder)" \
            "Standalone mode (copy folder to install dir and link executables)")

        # Install based on selected options
        install_jirasik "$INSTALL_TYPE" "$METHOD"
        gum style --border normal --margin "1" --padding "1 2" --border-foreground 82 \
            "Installation complete! You can now run '${SCRIPT_NAMES[*]}' from anywhere."

    elif [[ "$ACTION" == "Uninstall"* ]]; then
        # For uninstall, check sudo access to determine which uninstalls are possible
        uninstall_jirasik "User"
        gum style --border normal --margin "1" --padding "1 2" --border-foreground 82 \
            "User uninstallation complete!"

        if has_sudo_access; then
            uninstall_jirasik "System"
            gum style --border normal --margin "1" --padding "1 2" --border-foreground 82 \
                "System uninstallation complete!"
        else
            gum style --foreground 214 "System uninstallation skipped (requires sudo access)"
        fi
    else
        gum style --foreground 196 "No valid action selected. Exiting."
        exit 1
    fi
}

main
